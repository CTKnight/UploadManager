// Code generated by AutoDsl. Do not edit.
package me.ctknight.uploadmanager

import com.autodsl.annotation.AutoDslMarker
import java.util.ArrayList
import kotlin.Boolean
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.properties.Delegates
import okhttp3.Headers
import okhttp3.HttpUrl

fun request(block: RequestAutoDslBuilder.() -> Unit): UploadManager.Request = RequestAutoDslBuilder().apply(block).build()

@AutoDslMarker
class RequestAutoDslBuilder() {
    var targetUrl: HttpUrl by Delegates.notNull()

    var parts: List<Part> by Delegates.notNull()

    var headers: Headers? = null

    var title: String? = null

    var description: String? = null

    var userAgent: String? = null

    var meteredAllowed: Boolean? = null

    var roamingAllowed: Boolean? = null

    var notificationVisibility: UploadContract.Visibility? = null

    fun withTargetUrl(targetUrl: HttpUrl): RequestAutoDslBuilder = this.apply { this.targetUrl = targetUrl}

    fun parts(block: PartsAutoDslCollection.() -> Unit): RequestAutoDslBuilder = this.apply { this.parts = PartsAutoDslCollection().apply { block() }._partsAutoDslCollection }

    fun withParts(parts: List<Part>): RequestAutoDslBuilder = this.apply { this.parts = parts}

    fun withHeaders(headers: Headers?): RequestAutoDslBuilder = this.apply { this.headers = headers}

    fun withTitle(title: String?): RequestAutoDslBuilder = this.apply { this.title = title}

    fun withDescription(description: String?): RequestAutoDslBuilder = this.apply { this.description = description}

    fun withUserAgent(userAgent: String?): RequestAutoDslBuilder = this.apply { this.userAgent = userAgent}

    fun withMeteredAllowed(meteredAllowed: Boolean?): RequestAutoDslBuilder = this.apply { this.meteredAllowed = meteredAllowed}

    fun withRoamingAllowed(roamingAllowed: Boolean?): RequestAutoDslBuilder = this.apply { this.roamingAllowed = roamingAllowed}

    fun withNotificationVisibility(notificationVisibility: UploadContract.Visibility?): RequestAutoDslBuilder = this.apply { this.notificationVisibility = notificationVisibility}

    fun build(): UploadManager.Request = UploadManager.Request(targetUrl, parts, headers, title, description, userAgent, meteredAllowed, roamingAllowed, notificationVisibility)

    @AutoDslMarker
    class PartsAutoDslCollection internal constructor() {
        internal val _partsAutoDslCollection: ArrayList<Part> = ArrayList()

        operator fun Part.unaryPlus() {
            _partsAutoDslCollection.add(this)
        }
    }
}

