import java.lang.Boolean;
import kotlin.collections.List;
import me.ctknight.uploadmanager.UploadContract;
import me.ctknight.uploadmanager.Part;
import okhttp3.Cookie;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;

CREATE TABLE UploadRecord (
  _ID   INTEGER PRIMARY KEY AUTOINCREMENT,
  TargeUrl   TEXT AS HttpUrl NOT NULL,
  UserAgent   TEXT,
  Referer   TEXT AS HttpUrl,
  Headers    TEXT AS Headers,
  Parts    TEXT AS List<Part> NOT NULL,
  Status   TEXT AS UploadContract.UploadStatus NOT NULL DEFAULT "PENDING",
  NumFailed   INTEGER NOT NULL DEFAULT 0,
  RetryAfter   INTEGER NOT NULL DEFAULT 0,
  LastModification   INTEGER DEFAULT 0,
  NotificationTitle   TEXT,
  NotificationDescription   TEXT,
  TotalBytes   INTEGER NOT NULL DEFAULT -1,
  CurrentBytes   INTEGER NOT NULL DEFAULT -1,
  Visibility   TEXT AS UploadContract.Visibility NOT NULL DEFAULT "VISIBLE",
  ErrorMsg   TEXT,
--   TODO: use enum
  NetworkOption   INTEGER AS Boolean NOT NULL DEFAULT 1,
  ServerResponse   TEXT
);

insertUpload:
INSERT INTO UploadRecord
(TargeUrl, UserAgent, Headers, Parts, NotificationTitle, NotificationDescription)
VALUES
(?, ?, ?, ?, ?, ?);

lastInsertId:
SELECT last_insert_rowid();

selectById:
SELECT * FROM UploadRecord
WHERE _ID = ?;

selectAll:
SELECT * FROM UploadRecord;

selectNotDeleted:
SELECT * FROM UploadRecord
WHERE Status != "DELETED";

selectExceptVisibility:
SELECT * FROM UploadRecord
WHERE Visibility != ?;

-- delete a record completely
-- for most use cases, should set the status to deleted
-- rather than delete it
deleteById:
DELETE FROM UploadRecord
WHERE _ID = ?;

updateStatus:
UPDATE UploadRecord
SET Status = ?
WHERE _ID = ?;

partialUpdate:
UPDATE UploadRecord SET
  Status = ?,
  CurrentBytes = ?,
  TotalBytes = ?,
  NumFailed = ?,
  RetryAfter = ?,
  ServerResponse = ?,
  Visibility = ?
WHERE _ID = ?;

